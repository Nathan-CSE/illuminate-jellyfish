

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue May 21 16:01:24 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	maintext,global,class=CODE,split=1,delta=2
     7                           	psect	text1,local,class=CODE,merge=1,delta=2
     8                           	psect	text2,local,class=CODE,merge=1,delta=2
     9                           	psect	text3,local,class=CODE,merge=1,delta=2
    10                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    11                           	dabs	1,0x7E,2
    12     0000                     
    13                           ; Generated 12/10/2023 GMT
    14                           ; 
    15                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    16                           ; All rights reserved.
    17                           ; 
    18                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    19                           ; 
    20                           ; Redistribution and use in source and binary forms, with or without modification, are
    21                           ; permitted provided that the following conditions are met:
    22                           ; 
    23                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    24                           ;        conditions and the following disclaimer.
    25                           ; 
    26                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    27                           ;        of conditions and the following disclaimer in the documentation and/or other
    28                           ;        materials provided with the distribution. Publication is not required when
    29                           ;        this file is used in an embedded application.
    30                           ; 
    31                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    32                           ;        software without specific prior written permission.
    33                           ; 
    34                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    35                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    36                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    37                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    38                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    39                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    40                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    41                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    42                           ; 
    43                           ; 
    44                           ; Code-generator required, PIC16F877A Definitions
    45                           ; 
    46                           ; SFR Addresses
    47     0000                     	;# 
    48     0001                     	;# 
    49     0002                     	;# 
    50     0003                     	;# 
    51     0004                     	;# 
    52     0005                     	;# 
    53     0006                     	;# 
    54     0007                     	;# 
    55     0008                     	;# 
    56     0009                     	;# 
    57     000A                     	;# 
    58     000B                     	;# 
    59     000C                     	;# 
    60     000D                     	;# 
    61     000E                     	;# 
    62     000E                     	;# 
    63     000F                     	;# 
    64     0010                     	;# 
    65     0011                     	;# 
    66     0012                     	;# 
    67     0013                     	;# 
    68     0014                     	;# 
    69     0015                     	;# 
    70     0015                     	;# 
    71     0016                     	;# 
    72     0017                     	;# 
    73     0018                     	;# 
    74     0019                     	;# 
    75     001A                     	;# 
    76     001B                     	;# 
    77     001B                     	;# 
    78     001C                     	;# 
    79     001D                     	;# 
    80     001E                     	;# 
    81     001F                     	;# 
    82     0081                     	;# 
    83     0085                     	;# 
    84     0086                     	;# 
    85     0087                     	;# 
    86     0088                     	;# 
    87     0089                     	;# 
    88     008C                     	;# 
    89     008D                     	;# 
    90     008E                     	;# 
    91     0091                     	;# 
    92     0092                     	;# 
    93     0093                     	;# 
    94     0094                     	;# 
    95     0098                     	;# 
    96     0099                     	;# 
    97     009C                     	;# 
    98     009D                     	;# 
    99     009E                     	;# 
   100     009F                     	;# 
   101     010C                     	;# 
   102     010D                     	;# 
   103     010E                     	;# 
   104     010F                     	;# 
   105     018C                     	;# 
   106     018D                     	;# 
   107     0000                     	;# 
   108     0001                     	;# 
   109     0002                     	;# 
   110     0003                     	;# 
   111     0004                     	;# 
   112     0005                     	;# 
   113     0006                     	;# 
   114     0007                     	;# 
   115     0008                     	;# 
   116     0009                     	;# 
   117     000A                     	;# 
   118     000B                     	;# 
   119     000C                     	;# 
   120     000D                     	;# 
   121     000E                     	;# 
   122     000E                     	;# 
   123     000F                     	;# 
   124     0010                     	;# 
   125     0011                     	;# 
   126     0012                     	;# 
   127     0013                     	;# 
   128     0014                     	;# 
   129     0015                     	;# 
   130     0015                     	;# 
   131     0016                     	;# 
   132     0017                     	;# 
   133     0018                     	;# 
   134     0019                     	;# 
   135     001A                     	;# 
   136     001B                     	;# 
   137     001B                     	;# 
   138     001C                     	;# 
   139     001D                     	;# 
   140     001E                     	;# 
   141     001F                     	;# 
   142     0081                     	;# 
   143     0085                     	;# 
   144     0086                     	;# 
   145     0087                     	;# 
   146     0088                     	;# 
   147     0089                     	;# 
   148     008C                     	;# 
   149     008D                     	;# 
   150     008E                     	;# 
   151     0091                     	;# 
   152     0092                     	;# 
   153     0093                     	;# 
   154     0094                     	;# 
   155     0098                     	;# 
   156     0099                     	;# 
   157     009C                     	;# 
   158     009D                     	;# 
   159     009E                     	;# 
   160     009F                     	;# 
   161     010C                     	;# 
   162     010D                     	;# 
   163     010E                     	;# 
   164     010F                     	;# 
   165     018C                     	;# 
   166     018D                     	;# 
   167     0008                     _PORTDbits	set	8
   168     0007                     _PORTCbits	set	7
   169     0441                     _TRISD1	set	1089
   170     043B                     _TRISC3	set	1083
   171     043A                     _TRISC2	set	1082
   172     0439                     _TRISC1	set	1081
   173     0438                     _TRISC0	set	1080
   174                           
   175                           	psect	cinit
   176     07FC                     start_initialization:	
   177                           ; #config settings
   178                           
   179     07FC                     __initialization:
   180     07FC                     end_of_initialization:	
   181                           ;End of C runtime variable initialization code
   182                           
   183     07FC                     __end_of__initialization:
   184     07FC  0183               	clrf	3
   185     07FD  120A  118A  2FA8   	ljmp	_main	;jump to C main() function
   186                           
   187                           	psect	cstackCOMMON
   188     0070                     __pcstackCOMMON:
   189     0070                     ?_main:
   190     0070                     ?_sendBit:	
   191                           ; 1 bytes @ 0x0
   192                           
   193     0070                     ??_sendBit:	
   194                           ; 1 bytes @ 0x0
   195                           
   196     0070                     ?_sendByte:	
   197                           ; 1 bytes @ 0x0
   198                           
   199                           
   200                           ; 1 bytes @ 0x0
   201     0070                     	ds	1
   202     0071                     sendBit@bitVal:
   203                           
   204                           ; 1 bytes @ 0x1
   205     0071                     	ds	1
   206     0072                     ??_sendByte:
   207                           
   208                           ; 1 bytes @ 0x2
   209     0072                     	ds	1
   210     0073                     sendByte@byteVal:
   211                           
   212                           ; 1 bytes @ 0x3
   213     0073                     	ds	1
   214     0074                     sendByte@i:
   215                           
   216                           ; 1 bytes @ 0x4
   217     0074                     	ds	1
   218     0075                     ?_sendPixel:
   219     0075                     sendPixel@g:	
   220                           ; 1 bytes @ 0x5
   221                           
   222                           
   223                           ; 1 bytes @ 0x5
   224     0075                     	ds	1
   225     0076                     sendPixel@b:
   226                           
   227                           ; 1 bytes @ 0x6
   228     0076                     	ds	1
   229     0077                     ??_sendPixel:
   230     0077                     sendPixel@r:	
   231                           ; 1 bytes @ 0x7
   232                           
   233                           
   234                           ; 1 bytes @ 0x7
   235     0077                     	ds	1
   236     0078                     ??_main:
   237                           
   238                           ; 1 bytes @ 0x8
   239     0078                     	ds	3
   240                           
   241                           	psect	maintext
   242     07A8                     __pmaintext:	
   243 ;;
   244 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   245 ;;
   246 ;; *************** function _main *****************
   247 ;; Defined at:
   248 ;;		line 22 in file "main.c"
   249 ;; Parameters:    Size  Location     Type
   250 ;;		None
   251 ;; Auto vars:     Size  Location     Type
   252 ;;		None
   253 ;; Return value:  Size  Location     Type
   254 ;;                  1    wreg      void 
   255 ;; Registers used:
   256 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   257 ;; Tracked objects:
   258 ;;		On entry : B00/0
   259 ;;		On exit  : 0/0
   260 ;;		Unchanged: 0/0
   261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   262 ;;      Params:         0       0       0       0       0
   263 ;;      Locals:         0       0       0       0       0
   264 ;;      Temps:          3       0       0       0       0
   265 ;;      Totals:         3       0       0       0       0
   266 ;;Total ram usage:        3 bytes
   267 ;; Hardware stack levels required when called: 3
   268 ;; This function calls:
   269 ;;		_sendPixel
   270 ;; This function is called by:
   271 ;;		Startup code after reset
   272 ;; This function uses a non-reentrant model
   273 ;;
   274                           
   275     07A8                     _main:	
   276                           ;psect for function _main
   277                           
   278     07A8                     l637:	
   279                           ;incstack = 0
   280                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   281                           
   282                           
   283                           ;main.c: 24:         _delay((unsigned long)((500)*(4000000/4000.0)));
   284     07A8  1683               	bsf	3,5	;RP0=1, select bank1
   285     07A9  1303               	bcf	3,6	;RP1=0, select bank1
   286     07AA  1007               	bcf	7,0	;volatile
   287                           
   288                           ;main.c: 25: 
   289     07AB  1087               	bcf	7,1	;volatile
   290                           
   291                           ;main.c: 26:         PORTCbits.RC0 = 0;
   292     07AC  1107               	bcf	7,2	;volatile
   293                           
   294                           ;main.c: 27:         PORTCbits.RC1 = 0;
   295     07AD  1187               	bcf	7,3	;volatile
   296                           
   297                           ;main.c: 29:         sendPixel(0, 255, 0);
   298     07AE  1088               	bcf	8,1	;volatile
   299     07AF                     l23:	
   300                           ;main.c: 31: 
   301                           
   302                           
   303                           ;main.c: 32: 
   304     07AF  1283               	bcf	3,5	;RP0=0, select bank0
   305     07B0  1303               	bcf	3,6	;RP1=0, select bank0
   306     07B1  1487               	bsf	7,1	;volatile
   307                           
   308                           ;main.c: 33:         sendPixel(0, 0, 255);
   309     07B2  1407               	bsf	7,0	;volatile
   310     07B3                     l639:
   311                           
   312                           ;main.c: 36: }
   313     07B3  01F5               	clrf	sendPixel@g
   314     07B4  01F6               	clrf	sendPixel@b
   315     07B5  30FF               	movlw	255
   316     07B6  120A  118A  2745  120A  118A  	fcall	_sendPixel
   317     07BB                     l641:
   318                           
   319                           ;main.c: 37: 
   320     07BB  3003               	movlw	3
   321     07BC  00FA               	movwf	??_main+2
   322     07BD  308A               	movlw	138
   323     07BE  00F9               	movwf	??_main+1
   324     07BF  3055               	movlw	85
   325     07C0  00F8               	movwf	??_main
   326     07C1                     u47:
   327     07C1  0BF8               	decfsz	??_main,f
   328     07C2  2FC1               	goto	u47
   329     07C3  0BF9               	decfsz	??_main+1,f
   330     07C4  2FC1               	goto	u47
   331     07C5  0BFA               	decfsz	??_main+2,f
   332     07C6  2FC1               	goto	u47
   333     07C7  2FC8               	nop2
   334     07C8                     l643:
   335                           
   336                           ;main.c: 39: 
   337     07C8  1283               	bcf	3,5	;RP0=0, select bank0
   338     07C9  1303               	bcf	3,6	;RP1=0, select bank0
   339     07CA  1007               	bcf	7,0	;volatile
   340     07CB                     l645:
   341                           
   342                           ;main.c: 40: 
   343     07CB  1087               	bcf	7,1	;volatile
   344     07CC                     l647:
   345                           
   346                           ;main.c: 42: 
   347     07CC  30FF               	movlw	255
   348     07CD  00F5               	movwf	sendPixel@g
   349     07CE  01F6               	clrf	sendPixel@b
   350     07CF  3000               	movlw	0
   351     07D0  120A  118A  2745  120A  118A  	fcall	_sendPixel
   352                           
   353                           ;main.c: 43:     PORTDbits.RD1 = 1;
   354     07D5  3003               	movlw	3
   355     07D6  00FA               	movwf	??_main+2
   356     07D7  308A               	movlw	138
   357     07D8  00F9               	movwf	??_main+1
   358     07D9  3055               	movlw	85
   359     07DA  00F8               	movwf	??_main
   360     07DB                     u57:
   361     07DB  0BF8               	decfsz	??_main,f
   362     07DC  2FDB               	goto	u57
   363     07DD  0BF9               	decfsz	??_main+1,f
   364     07DE  2FDB               	goto	u57
   365     07DF  0BFA               	decfsz	??_main+2,f
   366     07E0  2FDB               	goto	u57
   367     07E1  2FE2               	nop2
   368     07E2                     l649:
   369                           
   370                           ;main.c: 46: 
   371     07E2  01F5               	clrf	sendPixel@g
   372     07E3  30FF               	movlw	255
   373     07E4  00F6               	movwf	sendPixel@b
   374     07E5  3000               	movlw	0
   375     07E6  120A  118A  2745  120A  118A  	fcall	_sendPixel
   376     07EB                     l651:
   377                           
   378                           ;main.c: 47:         PORTCbits.RC0 = 1;
   379     07EB  3003               	movlw	3
   380     07EC  00FA               	movwf	??_main+2
   381     07ED  308A               	movlw	138
   382     07EE  00F9               	movwf	??_main+1
   383     07EF  3055               	movlw	85
   384     07F0  00F8               	movwf	??_main
   385     07F1                     u67:
   386     07F1  0BF8               	decfsz	??_main,f
   387     07F2  2FF1               	goto	u67
   388     07F3  0BF9               	decfsz	??_main+1,f
   389     07F4  2FF1               	goto	u67
   390     07F5  0BFA               	decfsz	??_main+2,f
   391     07F6  2FF1               	goto	u67
   392     07F7  2FF8               	nop2
   393     07F8  2FAF               	goto	l23
   394     07F9  120A  118A  2800   	ljmp	start
   395     07FC                     __end_of_main:
   396                           
   397                           	psect	text1
   398     0745                     __ptext1:	
   399 ;; *************** function _sendPixel *****************
   400 ;; Defined at:
   401 ;;		line 86 in file "main.c"
   402 ;; Parameters:    Size  Location     Type
   403 ;;  r               1    wreg     unsigned char 
   404 ;;  g               1    5[COMMON] unsigned char 
   405 ;;  b               1    6[COMMON] unsigned char 
   406 ;; Auto vars:     Size  Location     Type
   407 ;;  r               1    7[COMMON] unsigned char 
   408 ;; Return value:  Size  Location     Type
   409 ;;                  1    wreg      void 
   410 ;; Registers used:
   411 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   412 ;; Tracked objects:
   413 ;;		On entry : 0/0
   414 ;;		On exit  : 0/0
   415 ;;		Unchanged: 0/0
   416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   417 ;;      Params:         2       0       0       0       0
   418 ;;      Locals:         1       0       0       0       0
   419 ;;      Temps:          0       0       0       0       0
   420 ;;      Totals:         3       0       0       0       0
   421 ;;Total ram usage:        3 bytes
   422 ;; Hardware stack levels used: 1
   423 ;; Hardware stack levels required when called: 2
   424 ;; This function calls:
   425 ;;		_sendByte
   426 ;; This function is called by:
   427 ;;		_main
   428 ;; This function uses a non-reentrant model
   429 ;;
   430                           
   431     0745                     _sendPixel:	
   432                           ;psect for function _sendPixel
   433                           
   434                           
   435                           ;incstack = 0
   436                           ; Regs used in _sendPixel: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   437                           ;sendPixel@r stored from wreg
   438     0745  00F7               	movwf	sendPixel@r
   439     0746                     l635:
   440     0746  0875               	movf	sendPixel@g,w
   441     0747  120A  118A  2759  120A  118A  	fcall	_sendByte
   442     074C  0877               	movf	sendPixel@r,w
   443     074D  120A  118A  2759  120A  118A  	fcall	_sendByte
   444     0752  0876               	movf	sendPixel@b,w
   445     0753  120A  118A  2759  120A  118A  	fcall	_sendByte
   446     0758                     l39:
   447     0758  0008               	return
   448     0759                     __end_of_sendPixel:
   449                           
   450                           	psect	text2
   451     0759                     __ptext2:	
   452 ;; *************** function _sendByte *****************
   453 ;; Defined at:
   454 ;;		line 79 in file "main.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;  byteVal         1    wreg     unsigned char 
   457 ;; Auto vars:     Size  Location     Type
   458 ;;  byteVal         1    3[COMMON] unsigned char 
   459 ;;  i               1    4[COMMON] unsigned char 
   460 ;; Return value:  Size  Location     Type
   461 ;;                  1    wreg      void 
   462 ;; Registers used:
   463 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   464 ;; Tracked objects:
   465 ;;		On entry : 0/0
   466 ;;		On exit  : 0/0
   467 ;;		Unchanged: 0/0
   468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   469 ;;      Params:         0       0       0       0       0
   470 ;;      Locals:         2       0       0       0       0
   471 ;;      Temps:          1       0       0       0       0
   472 ;;      Totals:         3       0       0       0       0
   473 ;;Total ram usage:        3 bytes
   474 ;; Hardware stack levels used: 1
   475 ;; Hardware stack levels required when called: 1
   476 ;; This function calls:
   477 ;;		_sendBit
   478 ;; This function is called by:
   479 ;;		_sendPixel
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483     0759                     _sendByte:	
   484                           ;psect for function _sendByte
   485                           
   486                           
   487                           ;incstack = 0
   488                           ; Regs used in _sendByte: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   489                           ;sendByte@byteVal stored from wreg
   490     0759  00F3               	movwf	sendByte@byteVal
   491     075A                     l605:
   492     075A  01F4               	clrf	sendByte@i
   493     075B                     l611:
   494     075B  0873               	movf	sendByte@byteVal,w
   495     075C  00F2               	movwf	??_sendByte
   496     075D  0874               	movf	sendByte@i,w
   497     075E  3C07               	sublw	7
   498     075F  3E01               	addlw	1
   499     0760  2F63               	goto	u24
   500     0761                     u25:
   501     0761  1003               	clrc
   502     0762  0CF2               	rrf	??_sendByte,f
   503     0763                     u24:
   504     0763  3EFF               	addlw	-1
   505     0764  1D03               	skipz
   506     0765  2F61               	goto	u25
   507     0766  0872               	movf	??_sendByte,w
   508     0767  3901               	andlw	1
   509     0768  120A  118A  2778  120A  118A  	fcall	_sendBit
   510     076D                     l613:
   511     076D  3001               	movlw	1
   512     076E  00FF               	movwf	btemp+1
   513     076F  087F               	movf	btemp+1,w
   514     0770  07F4               	addwf	sendByte@i,f
   515     0771                     l615:
   516     0771  3008               	movlw	8
   517     0772  0274               	subwf	sendByte@i,w
   518     0773  1C03               	skipc
   519     0774  2F76               	goto	u31
   520     0775  2F77               	goto	u30
   521     0776                     u31:
   522     0776  2F5B               	goto	l611
   523     0777                     u30:
   524     0777                     l36:
   525     0777  0008               	return
   526     0778                     __end_of_sendByte:
   527                           
   528                           	psect	text3
   529     0778                     __ptext3:	
   530 ;; *************** function _sendBit *****************
   531 ;; Defined at:
   532 ;;		line 51 in file "main.c"
   533 ;; Parameters:    Size  Location     Type
   534 ;;  bitVal          1    wreg     unsigned char 
   535 ;; Auto vars:     Size  Location     Type
   536 ;;  bitVal          1    1[COMMON] unsigned char 
   537 ;; Return value:  Size  Location     Type
   538 ;;                  1    wreg      void 
   539 ;; Registers used:
   540 ;;		wreg, status,2, status,0
   541 ;; Tracked objects:
   542 ;;		On entry : 0/0
   543 ;;		On exit  : 0/0
   544 ;;		Unchanged: 0/0
   545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   546 ;;      Params:         0       0       0       0       0
   547 ;;      Locals:         1       0       0       0       0
   548 ;;      Temps:          1       0       0       0       0
   549 ;;      Totals:         2       0       0       0       0
   550 ;;Total ram usage:        2 bytes
   551 ;; Hardware stack levels used: 1
   552 ;; This function calls:
   553 ;;		Nothing
   554 ;; This function is called by:
   555 ;;		_sendByte
   556 ;; This function uses a non-reentrant model
   557 ;;
   558                           
   559     0778                     _sendBit:	
   560                           ;psect for function _sendBit
   561                           
   562                           
   563                           ;incstack = 0
   564                           ; Regs used in _sendBit: [wreg+status,2+status,0]
   565                           ;sendBit@bitVal stored from wreg
   566     0778  00F1               	movwf	sendBit@bitVal
   567     0779                     l583:
   568                           
   569                           ;main.c: 56:         _delay((unsigned long)((0.35)*(4000000/4000.0)));
   570     0779  1283               	bcf	3,5	;RP0=0, select bank0
   571     077A  1303               	bcf	3,6	;RP1=0, select bank0
   572     077B  1488               	bsf	8,1	;volatile
   573     077C                     l585:
   574                           
   575                           ;main.c: 58:         PORTCbits.RC3 = 1;
   576     077C  0871               	movf	sendBit@bitVal,w
   577     077D  1903               	btfsc	3,2
   578     077E  2F80               	goto	u11
   579     077F  2F81               	goto	u10
   580     0780                     u11:
   581     0780  2F93               	goto	l29
   582     0781                     u10:
   583     0781                     l587:
   584                           
   585                           ;main.c: 60:         PORTCbits.RC3 = 0;
   586     0781  1407               	bsf	7,0	;volatile
   587     0782                     l589:
   588                           
   589                           ;main.c: 61:     }
   590     0782  30E9               	movlw	233
   591     0783  00F0               	movwf	??_sendBit
   592     0784                     u77:
   593     0784  0BF0               	decfsz	??_sendBit,f
   594     0785  2F84               	goto	u77
   595     0786                     l591:
   596                           
   597                           ;main.c: 62: 
   598     0786  1283               	bcf	3,5	;RP0=0, select bank0
   599     0787  1303               	bcf	3,6	;RP1=0, select bank0
   600     0788  1007               	bcf	7,0	;volatile
   601     0789                     l593:
   602                           
   603                           ;main.c: 63: 
   604     0789  1507               	bsf	7,2	;volatile
   605                           
   606                           ;main.c: 64: }
   607     078A  30C7               	movlw	199
   608     078B  00F0               	movwf	??_sendBit
   609     078C                     u87:
   610     078C  0BF0               	decfsz	??_sendBit,f
   611     078D  2F8C               	goto	u87
   612     078E  2F8F               	nop2
   613     078F                     l595:
   614                           
   615                           ;main.c: 65: 
   616     078F  1283               	bcf	3,5	;RP0=0, select bank0
   617     0790  1303               	bcf	3,6	;RP1=0, select bank0
   618     0791  1107               	bcf	7,2	;volatile
   619                           
   620                           ;main.c: 66: void sendByte(unsigned char byteVal) {
   621     0792  2FA7               	goto	l31
   622     0793                     l29:
   623                           
   624                           ;main.c: 68:     for(char i = 0; i < 8; i++) {
   625     0793  1407               	bsf	7,0	;volatile
   626     0794                     l597:
   627                           
   628                           ;main.c: 69:         sendBit((byteVal >> (7 - i)) & 0x01);
   629     0794  3074               	movlw	116
   630     0795  00F0               	movwf	??_sendBit
   631     0796                     u97:
   632     0796  0BF0               	decfsz	??_sendBit,f
   633     0797  2F96               	goto	u97
   634     0798  0000               	nop
   635     0799                     l599:
   636                           
   637                           ;main.c: 70:     }
   638     0799  1283               	bcf	3,5	;RP0=0, select bank0
   639     079A  1303               	bcf	3,6	;RP1=0, select bank0
   640     079B  1007               	bcf	7,0	;volatile
   641     079C                     l601:
   642                           
   643                           ;main.c: 71: }
   644     079C  1587               	bsf	7,3	;volatile
   645                           
   646                           ;main.c: 72: 
   647     079D  309F               	movlw	159
   648     079E  00F0               	movwf	??_sendBit
   649     079F                     u107:
   650     079F  2FA0               	nop2
   651     07A0  0BF0               	decfsz	??_sendBit,f
   652     07A1  2F9F               	goto	u107
   653     07A2  2FA3               	nop2
   654     07A3  2FA4               	nop2
   655     07A4                     l603:
   656                           
   657                           ;main.c: 73: void sendPixel(unsigned char r, unsigned char g, unsigned char b) {
   658     07A4  1283               	bcf	3,5	;RP0=0, select bank0
   659     07A5  1303               	bcf	3,6	;RP1=0, select bank0
   660     07A6  1187               	bcf	7,3	;volatile
   661     07A7                     l31:
   662     07A7  0008               	return
   663     07A8                     __end_of_sendBit:
   664     007E                     btemp	set	126	;btemp
   665     007E                     wtemp0	set	126
   666                           
   667                           	psect	config
   668                           
   669                           ;Config register CONFIG @ 0x2007
   670                           ;	Oscillator Selection bits
   671                           ;	FOSC = HS, HS oscillator
   672                           ;	Watchdog Timer Enable bit
   673                           ;	WDTE = OFF, WDT disabled
   674                           ;	Power-up Timer Enable bit
   675                           ;	PWRTE = OFF, PWRT disabled
   676                           ;	Brown-out Reset Enable bit
   677                           ;	BOREN = ON, BOR enabled
   678                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   679                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   680                           ;	Data EEPROM Memory Code Protection bit
   681                           ;	CPD = OFF, Data EEPROM code protection off
   682                           ;	Flash Program Memory Write Enable bits
   683                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   684                           ;	In-Circuit Debugger Mode bit
   685                           ;	DEBUG = 0x1, unprogrammed default
   686                           ;	Flash Program Memory Code Protection bit
   687                           ;	CP = OFF, Code protection off
   688     2007                     	org	8199
   689     2007  3F7A               	dw	16250

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      11
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_sendPixel
    _sendPixel->_sendByte
    _sendByte->_sendBit

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     597
                                              8 COMMON     3     3      0
                          _sendPixel
 ---------------------------------------------------------------------------------
 (1) _sendPixel                                            3     1      2     597
                                              5 COMMON     3     1      2
                           _sendByte
 ---------------------------------------------------------------------------------
 (2) _sendByte                                             3     3      0      75
                                              2 COMMON     3     3      0
                            _sendBit
 ---------------------------------------------------------------------------------
 (3) _sendBit                                              2     2      0      15
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _sendPixel
     _sendByte
       _sendBit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      B       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue May 21 16:01:24 2024

                     l31 07A7                       l23 07AF                       l36 0777  
                     l29 0793                       l39 0758                       u10 0781  
                     u11 0780                       u30 0777                       u31 0776  
                     u24 0763                       u25 0761                       u47 07C1  
                     u57 07DB                       u67 07F1                       u77 0784  
                     u87 078C                       u97 0796                      l601 079C  
                    l603 07A4                      l611 075B                      l613 076D  
                    l605 075A                      l615 0771                      l641 07BB  
                    l635 0746                      l651 07EB                      l643 07C8  
                    l645 07CB                      l637 07A8                      l591 0786  
                    l583 0779                      l647 07CC                      l639 07B3  
                    l593 0789                      l585 077C                      l649 07E2  
                    l595 078F                      l587 0781                      l597 0794  
                    l589 0782                      l599 0799                      u107 079F  
                   _main 07A8                     btemp 007E                     start 0000  
                  ?_main 0070          __end_of_sendBit 07A8                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07FC  
                 ??_main 0078                   _TRISC0 0438                   _TRISC1 0439  
                 _TRISC2 043A                   _TRISC3 043B                   _TRISD1 0441  
       __end_of_sendByte 0778                ??_sendBit 0070  __end_of__initialization 07FC  
          sendBit@bitVal 0071           __pcstackCOMMON 0070               __pmaintext 07A8  
        sendByte@byteVal 0073                ?_sendByte 0070                  __ptext1 0745  
                __ptext2 0759                  __ptext3 0778                  _sendBit 0778  
   end_of_initialization 07FC        __end_of_sendPixel 0759               ??_sendByte 0072  
              _PORTCbits 0007                _PORTDbits 0008      start_initialization 07FC  
              ___latbits 0002               sendPixel@b 0076               sendPixel@g 0075  
             sendPixel@r 0077                 ?_sendBit 0070                _sendPixel 0745  
             ?_sendPixel 0075                sendByte@i 0074                 _sendByte 0759  
            ??_sendPixel 0077  
